version: '3.0'
  
services:
  prometheus:
    container_name: prometheus
    build:
      context: prometheus
    image: trades/prometheus:1.0.0
    ports:
      - 9100:9100
      - 9090:9090
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 20M
    volumes:
      - promdata:/var/lib/prometheus
  grafana:
    container_name: grafana
    build:
      context: grafana
    image: trades/grafana:1.0.0
    ports:
      - 3000:3000
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 40M
  dbmon:
    image: prom/mysqld-exporter:v0.13.0
    container_name: dbmon
    environment:
      DATA_SOURCE_NAME: 'exporter:promexporter123@(tradesdb:3306)/'
    command: --collect.global_status --collect.info_schema.innodb_metrics --collect.auto_increment.columns --collect.info_schema.processlist --collect.binlog_size --collect.info_schema.tablestats --collect.global_variables --collect.info_schema.query_response_time --collect.info_schema.userstats --collect.info_schema.tables --collect.perf_schema.tablelocks --collect.perf_schema.file_events --collect.perf_schema.eventswaits --collect.perf_schema.indexiowaits --collect.perf_schema.tableiowaits --collect.slave_status
  blackbox:
    build:
      context: blackbox
    image: monitor/blackbox
    container_name: blackbox
  # itrs:
  #   build:
  #     context: itrs
  #     dockerfile: Dockerfile.ubuntu
  #   image: steve353/monitorlab-itrs:2.0
  #   hostname: b4abc4b146ad
  #   container_name: itrs
  #   ports:
  #     - 7039:7039
  #     - 7036:7036
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 200M
  #       reservations:
  #         memory: 50M
  #   volumes:
  #     - ${PWD}/ITRSLic:/opt/itrs/licensedir
      
  tradesdb:
    container_name: tradesdb
    build:
      context: .
      dockerfile: Dockerfile-mysql
    image: trades/mysql:1.0.0
    ports:
      - "7037:7036"
      - "3316:3306"
    deploy:
      resources:
        limits:
          memory: 5G
        reservations:
          memory: 2G
    volumes:
      - tradesdbvol:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: trades
      ELK: 127.0.0.1
      ENVNAME: dev

  activemq:
    container_name: activemq
    image: rmohr/activemq
    ports:
      - "61616:61616"
      - "8161:8161"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 300M
    volumes:
#       - /docker/trades/activemq/conf:/opt/activemq/conf
      - tradesmqdata:/data/activemq
      - tradesmqlog:/var/log/activemq
    restart: always

  trades-server:
    container_name: trades-server
    build:
      context: .
      dockerfile: Dockerfile-trade-server
    image: trades/server:1.0.0
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    ports:
      - "8080:8080"
      - "7038:7036"
    restart: "no"
    environment:
      ELK: 127.0.0.1
      ENVNAME: dev

  execution:
    container_name: trades-execution
    build:
      context: .
      dockerfile: Dockerfile-injector
    image: trades/injector:1.0.0
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 300M
    environment:
      INJECTOR_CLASS: "com.neueda.trade.injector.ExecutionEngine"
      INJECTOR_APP: "execution"
      INJECTOR_TRANSPORT: "injector-activemq"
    external_links:
      - trades-server:tradeserver
      - activemq:activemq
    restart: "always"  

  compliance:
    container_name: trades-compliance
    build:
      context: .
      dockerfile: Dockerfile-injector
    image: trades/injector:1.0.0
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 300M
    depends_on:
      - "execution"
    environment:
      INJECTOR_CLASS: "com.neueda.trade.injector.ComplianceEngine"
      INJECTOR_APP: "compliance"
      INJECTOR_TRANSPORT: "injector-activemq"
    external_links:
      - trades-server:tradeserver
      - activemq:activemq
    restart: "always"  
    
  generator:
    container_name: trades-generator
    build:
      context: .
      dockerfile: Dockerfile-injector
    image: trades/injector:1.0.0
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 300M
    depends_on:
      - "compliance"
    environment:
      INJECTOR_CLASS: "com.neueda.trade.injector.Generator"
      INJECTOR_APP: "generator"
      INJECTOR_TRANSPORT: "injector-activemq"
    external_links:
      - trades-server:tradeserver
      - activemq:activemq
    restart: "always" 

volumes:
  tradesdbvol:
  tradesmqdata:
  tradesmqlog:
  promdata: